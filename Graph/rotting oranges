//https://leetcode.com/problems/rotting-oranges/

class Solution {
public:
    
    int dx[4]={0,-1,1,0};
    int dy[4]={1,0,0,-1};
    bool is_valid(int x,int y,int m,int n){
        if(x<0 || x>=m || y<0 || y>=n)
            return false;
        return true;
        
    }
 
    int orangesRotting(vector<vector<int>>& grid) {
        int count=-1;
        int m=grid.size();
       
        int n=grid[0].size();
        int i,j;
        int flag=true;
        queue<pair<int,int>>q;
        int fresh=0;
        for(i=0;i<m;i++){
            for(j=0;j<n;j++){
                if(grid[i][j]==2){
                    q.push({i,j});
                }
                if(grid[i][j]==1){
                    fresh++;
                }
            }
            
        }
       
        while(q.empty()!=true){
            int size_min=q.size();
            while(size_min--){
                i=q.front().first;
                j=q.front().second;
                q.pop();
                 flag=false;
                 for(int k=0;k<4;k++){
                    int x=i+dx[k];
                    int y=j+dy[k];
                    if(is_valid(x,y,m,n) && grid[x][y]==1){
                        fresh--;
                        grid[x][y]=2;
                        q.push({x,y});
                    }
                }
            }
            count++;
        }
        if (fresh!=0) return -1;
        if(count==-1)count=0;
        return count;
        
    }
};
