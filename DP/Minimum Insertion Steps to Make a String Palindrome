// https://leetcode.com/problems/minimum-insertion-steps-to-make-a-string-palindrome/


class Solution {
public:
    int minInsertions(string a) {
        string b=a;
        reverse(b.begin(),b.end());
        int n=a.size();
        int tab[n+1][n+1];
        for(int i=0;i<=n;i++){
            tab[i][0]=0;
        }
        for(int i=0;i<=n;i++){
            tab[0][i]=0;
        }
        
        for(int i=1;i<=n;i++){
            for(int j=1;j<=n;j++){
                if(a[i-1]==b[j-1])
                    tab[i][j]=1+tab[i-1][j-1];
                else
                    tab[i][j]=max(tab[i-1][j], tab[i][j-1]);
            }
        }
      
        
        
        
        return n-tab[n][n];
    }
};
